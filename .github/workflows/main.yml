name: Main

on: [push, pull_request]


jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}

  pytest:
    name: Running tests on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        r: [latest]
        # r: [3.5, latest, devel]
        python: [3.7]
        # python: [2.7, 3.5, 3.6, 3.7]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
        name: Install Python
        with:
          python-version: ${{ matrix.python }}
      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.r }}
      - name: Install reticulate
        run: Rscript -e "install.packages('reticulate')"
      - name: Insert LD_LIBRARY_PATH
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: echo LD_LIBRARY_PATH="$LD_LIBRARY_PATH:`R RHOME`/lib" >> $GITHUB_ENV
      - name: Install and run tests
        run: |
          python -m pip install -e .[test]
          pytest -s --cov=rchitect
      - name: codecov
        run: |
          python -m pip install codecov
          codecov
        env:
          CODECOV_TOKEN: ${{secrets.CODECOV_TOKEN}}

  check_tarball:
    name: Check tarball is installable
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
        name: Install Python
        with:
          python-version: '3.7'
      - run: |
          python setup.py sdist
          pip install dist/rchitect-*.tar.gz

  build_wheels_v1:
    needs: [pytest, check_tarball]
    name: Build wheels on ${{ matrix.os }} for ${{ matrix.build }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            build: 'cp27-* cp35-*'
          - os: macos-latest
            build: 'cp27-* cp35-*'
          - os: windows-latest
            build: 'cp27-win32'
          - os: windows-latest
            build: 'cp27-win_amd64'
          - os: windows-latest
            build: 'cp35-*'
    runs-on: ${{ matrix.os }}
    env:
      CIBW_BUILD: ${{ matrix.build }}
    steps:
      - uses: actions/checkout@v2
      - if: matrix.os == 'windows-latest' && matrix.build == 'cp27-win32'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86
      - if: matrix.os == 'windows-latest' && matrix.build == 'cp27-win_amd64'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
      - if: matrix.os == 'windows-latest' && startsWith(matrix.build, 'cp27-')
        shell: bash
        run: |
          echo "DISTUTILS_USE_SDK=1" >> $GITHUB_ENV
          echo "MSSdk=1" >> $GITHUB_ENV
      - name: Build wheels
        uses: pypa/cibuildwheel@v1.11.1
      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./wheelhouse/*.whl

  build_wheels:
    needs: [pytest, check_tarball]
    name: Build wheels on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      # a wheel with wrong arch might be installed
      CIBW_BEFORE_BUILD_MACOS: "pip install --no-binary :all: cffi"
      CIBW_ARCHS_MACOS: "x86_64 arm64"
    steps:
      - uses: actions/checkout@v2
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.0.0a2
      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./wheelhouse/*.whl

  twine:
    name: Upload tarball and wheels
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build_wheels_v1, build_wheels]
    runs-on: ubuntu-latest
    env:
      TWINE_USERNAME: ${{secrets.TWINE_USERNAME}}
      TWINE_PASSWORD: ${{secrets.TWINE_PASSWORD}}
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
        name: Install Python
        with:
          python-version: '3.7'
      - run: python -m pip install twine
      - run: |
          python setup.py sdist
          python -m twine upload dist/*
      - uses: actions/download-artifact@v1
        with:
          name: wheels
          path: ./wheelhouse
      - run: python -m twine upload ./wheelhouse/*.whl
