name: build

on: [push, pull_request]


jobs:
  linux:
    strategy:
      fail-fast: false
      matrix:
        r: [latest]
        # r: [3.5, latest, devel]
        python: [3.7]
        # python: [2.7, 3.5, 3.6, 3.7]
    runs-on: ubuntu-latest
    container: rocker/tidyverse:${{ matrix.r }}
    steps:
      - uses: actions/checkout@v1
      - name: Install apt-get dependencies
        run: |
          apt-get update
          apt-get install git ssh curl bzip2 libffi-dev -y
      - name: Setup Miniconda
        run: |
          curl -L https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -o /tmp/miniconda.sh
          bash /tmp/miniconda.sh -b -f -p $HOME/miniconda
          export PATH="$HOME/miniconda/bin/:$PATH"
          conda create -y -n myenv python=${{ matrix.python }}
          echo "$HOME/miniconda/bin" >> $GITHUB_PATH
      - name: Install reticulate
        run: Rscript -e "install.packages('reticulate', repo = 'https://cloud.r-project.org')"
      - name: Install and run tests
        shell: bash  # to allow `source`
        run: |
          source activate myenv
          python -m pip install -e .[test]
          export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:`R RHOME`/lib"
          pytest -s --cov=rchitect
          python -m pip install codecov
          codecov
        env:
          CODECOV_TOKEN: ${{secrets.CODECOV_TOKEN}}

  macos:
    strategy:
      fail-fast: false
      matrix:
        r: [latest]
        # r: [3.5, latest, devel]
        python: [3.7]
        # python: [2.7, 3.5, 3.6, 3.7]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1
      - name: Setup Miniconda
        run: |
          curl -L https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -o /tmp/miniconda.sh
          bash /tmp/miniconda.sh -b -f -p $HOME/miniconda
          export PATH="$HOME/miniconda/bin:$PATH"
          conda create -y -n myenv python=${{ matrix.python }} -c conda-forge
          echo "$HOME/miniconda/bin" >> $GITHUB_PATH
      - name: Install R
        run: |
          if [ "${{ matrix.r }}" = "latest" ]; then
            URL="https://cran.r-project.org/bin/macosx/base/R-release.pkg"
          elif [ "${{ matrix.r }}" = "devel" ]; then
            URL="https://mac.r-project.org/high-sierra/R-devel/R-devel.pkg"
          else
            R_FILE=$(curl -sL https://cran.r-project.org/bin/macosx/base/ | grep -o 'R-${{ matrix.r }}[0-9\.]*.pkg' | tail -n1)
            URL="https://cran.r-project.org/bin/macosx/base/$R_FILE"
          fi
          echo downloading "$URL"
          curl -L "$URL" -o R.pkg
          sudo installer -pkg R.pkg -target /
      - name: Install reticulate
        run: Rscript -e "install.packages('reticulate', repo = 'https://cloud.r-project.org')"
      - name: Install and run tests
        run: |
          source activate myenv
          python -m pip install -e .[test]
          export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:`R RHOME`/lib"
          pytest -s --cov=rchitect
          python -m pip install codecov
          codecov
        env:
          CODECOV_TOKEN: ${{secrets.CODECOV_TOKEN}}

  windows:
    strategy:
      fail-fast: false
      matrix:
        r: [latest]
        # r: [3.5, latest, devel]
        python: [3.7]
        # python: [2.7, 3.5, 3.6, 3.7]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
      - name: Setup Miniconda
        run: |
          $env:PATH = "$env:CONDA;$env:CONDA\Scripts;$env:PATH"
          conda create -y -n myenv python=${{ matrix.python }} -c conda-forge
          conda init powershell
      - name: Install R
        run: |
          If ('${{ matrix.r }}' -eq 'latest') {
            (new-object net.webclient).DownloadString("http://cran.rstudio.com/bin/windows/base/") -match 'href="(R-[0-9.]*[a-zA-Z]*-win.exe)"';
            (new-object net.webclient).DownloadFile($("http://cran.rstudio.com/bin/windows/base/"+$matches[1]),"C:\R-binary.exe")
          } ElseIf ('${{ matrix.r }}' -eq 'devel') {
            (new-object net.webclient).DownloadFile("https://cran.r-project.org/bin/windows/base/R-devel-win.exe","C:\R-binary.exe")
          } Else {
            (new-object net.webclient).DownloadString("http://cran.rstudio.com/bin/windows/base/old/") -match 'R (${{ matrix.r }}[\\.0-9]*)</a>'
            (new-object net.webclient).DownloadFile($("https://cran.r-project.org/bin/windows/base/old/"+$matches[1]+"/R-"+$matches[1]+"-win.exe"),"C:\R-binary.exe")
          }
          Start-Process -FilePath "C:\R-binary.exe" -Wait -ArgumentList "/VERYSILENT /DIR=C:\R"
          echo "C:\R\bin\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Install reticulate
        run: |
          $ErrorActionPreference = "Continue"
          Rscript -e "install.packages('reticulate', repo = 'https://cloud.r-project.org', type = 'win.binary')"
      - name: Install and run tests
        run: |
          conda activate myenv
          python -m pip install -e .[test]
          pytest -s --cov=rchitect
      - name: codecov
        run: |
          conda activate myenv
          $ErrorActionPreference = "Continue"
          python -m pip install codecov
          codecov
        env:
          CODECOV_TOKEN: ${{secrets.CODECOV_TOKEN}}

  build_wheels_py27:
    needs: [linux, macos, windows]
    name: Build Python 2.7 wheels on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      CIBW_BUILD: 'cp27-*'
    steps:
      - uses: actions/checkout@v2
      - name: Build wheels
        uses: pypa/cibuildwheel@v1.11.1
      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./wheelhouse/*.whl

  build_wheels_py27_win:
    needs: [linux, macos, windows]
    name: Build Python 2.7 wheels on Windows
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x64
          - x86
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
      - name: Setup CIBW_BUILD
        shell: bash
        run: |
          if [ "${{ matrix.arch }}" = "x86" ]; then
            echo "CIBW_BUILD=cp27-win32" >> $GITHUB_ENV
          else
            echo "CIBW_BUILD=cp27-win_amd64" >> $GITHUB_ENV
          fi
      - name: Build wheels
        uses: pypa/cibuildwheel@v1.11.1
        env:
          DISTUTILS_USE_SDK: 1
          MSSdk: 1
      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./wheelhouse/*.whl

  build_wheels:
    needs: [linux, macos, windows]
    name: Build wheels on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
          - os: windows-latest
          - os: macos-latest
            arch: x86_64
            build: "cp*"
          - os: macos-latest
            arch: arm64
            build: "cp39-*"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup CIBW_BUILD for macos
        if: matrix.os == 'macos-latest'
        run: |
          echo "CIBW_BUILD=${{ matrix.build }}" >> $GITHUB_ENV
          echo "CIBW_ARCHS_MACOS=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "CIBW_BEFORE_ALL_MACOS=pip install -U cffi" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.0.0a2
      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./wheelhouse/*.whl

  twine:
    name: Upload tarball and wheels
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build_wheels_py27, build_wheels_py27_win, build_wheels]
    runs-on: ubuntu-latest
    env:
      TWINE_USERNAME: ${{secrets.TWINE_USERNAME}}
      TWINE_PASSWORD: ${{secrets.TWINE_PASSWORD}}
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
        name: Install Python
        with:
          python-version: '3.7'
      - run: python -m pip install twine
      - run: |
          python setup.py sdist
          python -m twine upload dist/*
      - uses: actions/download-artifact@v1
        with:
          name: wheels
          path: ./wheelhouse
      - run: python -m twine upload ./wheelhouse/*.whl
